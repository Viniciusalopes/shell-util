#!/usr/bin/env bash
# Template orgulhosamente criado por (Shell-Base)

#-----------HEADER-------------------------------------------------------------|
# AUTOR             : Vovolinux <suporte@vovolinux.com.br>
# HOMEPAGE          : https://vovolinux.com.br 
# DATA DE CRIAÇÃO   : 02/11/2021 às 00:52 
# PROGRAMA          : shell-util-core
# VERSÃO            : 1.0.0
# LICENÇA           : MIT - © 2021 - Vovolinux
# PEQUENA DESCRIÇÃO : Importa as bibliotecas do shell-util formando um core.
#
# CHANGELOG :
#
#------------------------------------------------------------------------------|


#--------------------------------- VARIÁVEIS ---------------------------------->
#
SU_TMP='/tmp/shell-util'
SU_CFG="shell-util-core.cfg"
#------------------------------- FIM-VARIÁVEIS --------------------------------<


#----------------------------------- FUNÇÕES ---------------------------------->
#

# Verifica se o arquivo de configurações está no mesmo diretório
shell-util-core.grant_CFG()
{
    printf %b "grant_CFG -> "
    [[ "${1}" = "" ]] && local _cfg="${SU_TMP}/${SU_CFG}" || local _cfg="${1}";
    if [[ -f "${_cfg}" ]]; then
        source $_cfg
    else
        printf %b "${SU_MSG_FILE_NOT_FOUND} (${_cfg}).\n"
        exit 1
    fi
}

# Corrige o path 
shell-util-core.sanitize_path()
{
    local _path=$1
    # Se não informar o diretório
    [[ "${_path}" = "" ]] && _path="$PWD"

    # Substitui o ~ (til) pelo endereço absoluto da home do usuário
    [[ "${_path:0:2}" = "~/" ]] && _path="${HOME}${_path: 1}" 

    # Retira a barra do final
    [[ "${_path: -1}" = "/" ]] && _path="${_path::-1}" 

    printf %b "${_path}"    
}

# Garante o diretório passado no primeiro argumento
# $1=Path do diretório
# $2=sudo
# $2=Proprietário e Grupo
shell-util-core.grant_DIR()
{
    printf %b "grant_DIR -> "
    local _dir=$(shell-util-core.sanitize_path $1)
    if ! [[ -d ${_dir} ]]; then
        $2 mkdir -pv "${_dir}"
        if ! [[ "${3}" = "" && -d "${_dir}" ]]; then
            sudo chown $3:$3 ${_dir} -Rf
        fi
    fi
}

# Verifica se o programa está instalado
shell-util-core.grant_PKG()
{
    printf %b "grant_PKG '${SU_PKG}' -> "
    which ${SU_PKG}
    if [[ $? -ne 0 ]]; then
        printf %b "${SU_MSG_FAIL_NOT_INSTALLED}"
        printf %b "try install dep -> "
        if [[ "${SU_PKG}" -eq "docker" ]]; then
            sudo apt install -y docker.io docker-compose
        else
            sudo apt install -y ${SU_PKG}
        fi
        
        if [[ $? -ne 0 ]]; then
            printf %b "${SU_MSG_FAIL_DEP}" && exit 1
        fi
    fi
}

shell-util-core.get_PKGS()
{
    for p in "${SU_PKGS[@]}"; do
        SU_PKG="${p}"
        shell-util-core.grant_PKG
    done
}

# Garante o shell_util.so
shell-util-core.grant_FILE()
{
    printf %b "grant_FILE '${SU_FILE}' -> "
    
    if [[ -f "${SU_TMP}/${SU_FILE}" ]]; then
        printf %b "OK\n"
    else
        wget -v ${SU_RAW}/${SU_FILE} -O ${SU_TMP}/${SU_FILE}
        # Encerra se não conseguir fazer o download do arquivo
        if [[ $? -ne 0 ]]; then
            printf %b "${SU_MSG_FAIL_DEP}" \
            && rm -rfv ${SU_TMP}/${SU_FILE} \
            && exit 1
        fi
    fi
}

shell-util-core.get_LIBS() {
    for f in "${SU_FILES[@]}"; do
        SU_FILE=${f}
        shell-util-core.grant_FILE
        source ${SU_TMP}/${f}
    done
}

shell-util-core.get_FILES()
{
    for f in "${SU_FILES[@]}"; do
        SU_FILE=${f}
        shell-util-core.grant_FILE
    done
}

shell-util-core.create_FILE()
{
    printf %b "create_FILE '${1}' -> "
    if [[ "${1}" = "" ]]; then
        printf %b "${SU_MSG_NOT_ARG_FILENAME}"
    else
        local _file="${1}"
        local _filename=$(printf "${_file}" | rev | cut -d '/' -f 1 | rev)
        local _filepath=$(printf "${_file}" | sed "s,$_filename,,g")
        local _fullpath="${_filepath}${_filename}"

        mkdir -pv "${_filepath}" \
        && touch "${_fullpath}" \
        && ls -al "${_fullpath}" 
    fi
}
#--------------------------------- FIM-FUNÇÕES --------------------------------<


#---------------------------------- TESTES ------------------------------------>
#
shell-util-core.grant_DIR $SU_TMP
shell-util-core.grant_CFG "${SU_TMP}/${SU_CFG}"

#--------------------------------- FIM-TESTES ---------------------------------<

# Programa começa aqui :)

shell-util-core.grant_PKG
shell-util-core.get_LIBS