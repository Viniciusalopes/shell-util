#!/usr/bin/env bash
# Template orgulhosamente criado por (Shell-Base)

#-----------HEADER-------------------------------------------------------------|
# AUTOR             : Vovolinux <suporte@vovolinux.com.br>
# HOMEPAGE          : https://vovolinux.com.br 
# DATA DE CRIAÇÃO   : 02/11/2021 às 00:52 
# PROGRAMA          : shell-util-core
# VERSÃO            : 1.0.0
# LICENÇA           : MIT - © 2021 - Vovolinux
# PEQUENA DESCRIÇÃO : Importa as bibliotecas do shell-util formando um core.
#
# CHANGELOG :
#
#------------------------------------------------------------------------------|

#--------------------------------- VARIÁVEIS ---------------------------------->
#
# Aqui vão todas as váriaveis do programa.

### VARIÁVEIS DO SCRIPT ###

# Autor
autor='Vovolinux'

# Programa
programa='shell-util-core'

# Versão
versao='1.0.0'

# Ano atual
ano='2021'

# Informação de Copyright
copyright="© 2021 - Vovolinux"

# Dependencias de shell_util
SU_LIB='os.su'
SU_PKG='wget'

SU_LIBS=(
    #'menu.su'
    #'os.su'
    #'text.su'
)

### VARIÁVEIS PARA MENSAGENS FIXAS ###
SU_MSG_NOT_INSTALLED="FAIL!\nPacote não está instalado.\n"
SU_MSG_FAIL_DEP="FAIL!\nDependência não foi satisfeita.\n"


### VARIÁVEIS PARA LINKS WEB ###

# Caminho para download das bibliotecas auxiliares de shell-util
SU_RAW='https://raw.githubusercontent.com/Viniciusalopes/shell-util/master'


### VARIÁVEIS DE DIRETÓRIOS E ARQUIVOS ###

# Diretório temporário para scripts auxiliares e dependências
SU_TMP='/home/projects/shell-util'

#------------------------------- FIM-VARIÁVEIS --------------------------------<



#----------------------------------- FUNÇÕES ---------------------------------->
#

# Importa o shell-util-core e suas dependencias
# Incluir em scripts que utilizarão o shell-util-core
shell-util-core.grant_SU_CORE()
{
    local SU_RAW="https://raw.githubusercontent.com/Viniciusalopes/shell-util/master"
    local SU_MSG_NOT_INSTALLED="FAIL!\nPacote não está instalado.\n"
    local SU_MSG_FAIL_DEP="FAIL!\nDependência não foi satisfeita.\n"
    local SU_TMP="/home/projects/shell-util"
    local SU_PKG="wget"
    local SU_LIB="shell-util-core.su"

    # Garante o diretório temporário
    # shell-util-core.grant_SU_TMP()
    # {
    # Cria o diretório para dependências
    if ! [[ -d ${SU_TMP} ]]; then
        mkdir -pv "${SU_TMP}"
    fi
    # }

    # Verifica se o programa está instalado
    # shell-util-core.grant_PKG()
    # {
    printf %b "grant_PKG '${SU_PKG}' -> "
    which ${SU_PKG}
    if [[ $? -ne 0 ]]; then
        printf %b "${SU_MSG_NOT_INSTALLED}"
        printf %b "try install dep -> "
        sudo apt install -y ${SU_PKG}
        if [[ $? -ne 0 ]]; then
            printf %b "${SU_MSG_FAIL_DEP}" && exit 1
        fi
    fi
    # }

    # Garante o shell_util.so
    # shell-util-core.grant_OS()
    # {
    printf %b "grant_LIB '${SU_LIB}' -> "
    
    if [[ -f "${SU_TMP}/${SU_LIB}" ]]; then
        printf %b "OK\n"
    else
        wget -v ${SU_RAW}/${SU_LIB} -O ${SU_TMP}/${SU_LIB}
        # Encerra se não conseguir fazer o download do arquivo
        if [[ $? -ne 0 ]]; then
            printf %b "${SU_MSG_FAIL_DEP}" \
            && rm -rfv ${SU_TMP}/${SU_LIB} \
            && exit 1
        fi
    fi
    source ${SU_TMP}/${SU_LIB}
    # }
}

# Verifica se o programa está instalado
shell-util-core.grant_PKG()
{
    printf %b "grant_PKG '${SU_PKG}' -> "
    which ${SU_PKG}
    if [[ $? -ne 0 ]]; then
        printf %b "${SU_MSG_NOT_INSTALLED}"
        printf %b "try install dep -> "
        sudo apt install -y ${SU_PKG}
        if [[ $? -ne 0 ]]; then
            printf %b "${SU_MSG_FAIL_DEP}" && exit 1
        fi
    fi
}

# Garante o diretório temporário
shell-util-core.grant_TMP()
{
    # Cria o diretório para dependências
    if ! [[ -d ${SU_TMP} ]]; then
        mkdir -pv "${SU_TMP}"
    fi
}

# Garante o shell_util.so
shell-util-core.grant_LIB()
{
    printf %b "grant_LIB '${SU_LIB}' -> "
    
    if [[ -f "${SU_TMP}/${SU_LIB}" ]]; then
        printf %b "OK\n"
    else
        wget -v ${SU_RAW}/${SU_LIB} -O ${SU_TMP}/${SU_LIB}
        # Encerra se não conseguir fazer o download do arquivo
        if [[ $? -ne 0 ]]; then
            printf %b "${SU_MSG_FAIL_DEP}" \
            && rm -rfv ${SU_TMP}/${SU_LIB} \
            && exit 1
        fi
    fi
    source ${SU_TMP}/${SU_LIB}
}

shell-util-core.get_LIBS()
{
    for lib in "${SU_LIBS[@]}"; do
        SU_LIB=${lib}
        shell-util-core.grant_LIB
    done
}
#--------------------------------- FIM-FUNÇÕES --------------------------------<



#---------------------------------- TESTES ------------------------------------>
#
# Testes iniciais do seu programa vão neste bloco.


#--------------------------------- FIM-TESTES ---------------------------------<

# Programa começa aqui :)

shell-util-core.grant_TMP
shell-util-core.grant_PKG
shell-util-core.get_LIBS