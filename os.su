#!/usr/bin/env bash
# Template orgulhosamente criado por (Shell-Base)

#-----------HEADER-------------------------------------------------------------|
# AUTOR             : Vovolinux <suporte@vovolinux.com.br>
# HOMEPAGE          : https://vovolinux.com.br 
# DATA DE CRIAÇÃO   : 25/04/2020 às 17:37 
# PROGRAMA          : so
# VERSÃO            : 1.0.0
# LICENÇA           : MIT
# PEQUENA DESCRIÇÃO : Informações sobre o sistema operacional e afins.
#
# CHANGELOG :
#
#------------------------------------------------------------------------------|


#--------------------------------- VARIÁVEIS ---------------------------------->

# Dependências e scripts auxiliares, para a função 'get_sources()'
# $sources() deve ser declarado antes pelo chamador, de forma global
sources=()

#------------------------------- FIM-VARIÁVEIS --------------------------------<


#----------------------------------- FUNÇÕES ---------------------------------->

# Encerra o script se não estiver sendo executado como r00t.
somente_root()
{
    # é root?
    [[ ${UID} -ne 0 ]] && {  
        printf %b "Execute como r00t.\n"
        exit 1
    }
}

# Obtém o nome da distro
get_distro()
{
    local release='os-release'
    local linha='PRETTY'
    
    # Compatibilidade os-release <-> lsb-release
    if ! [[ -e /etc/${release} ]]; then
        local release='lsb-release'
        local linha='CODENAME'
    fi    

    printf %b "$(cat /etc/"${release}" | grep "${linha}" | cut -d"\"" -f2)"
}

# Verifica se o script já foi testado na distro atual.
# $distros() deve ser declarado antes pelo chamador, de forma global
# $1 = Local da dependencia shell-util/menu
# $REPLY=sS, continua.
# $REPLY=nN ou inválido, encerra o chamador.

verifica_distro()
{
    # Verifica se o local da dependência shell-util/menu foi passado por argumento
    # Se sim, insere a dependencia
    # Se não, encerra o chamador
    if [[ "$1" = "" ]]; then
        printf %b "verifica_distro: Dependência não encontrada: 'shell-util/menu'\n"
        exit 1
    else
        source "$1"
    fi
    
    # Flag para continuar ou interromper o programa
    # 0 = sim
    # 1 = não
    local encontrado=1
    
    # Distro atual
    local distro=$(get_distro)

    for d in "${distros[@]}"; do
        if [[ "${d}" == ${distro} ]]; then
            encontrado=0
        fi
    done

    if [[ $encontrado -eq 1 ]]; then
        printf %b ">> Este programa ainda não foi testado com ${distro}.\n";
        if ! pergunta_sn "Deseja continuar mesmo assim? [s/N]"; then
            exit 1
        fi
    fi
}

# Encerra o script se não encontrar pelo menos uma ocorrência com 
# o nome do arquivo no diretório e exibe link para download.
# $1 = diretório
# $2 = nome do arquivo
# $3 = instruções para download
require()
{
    # Verifica se passou dois ou mais argumentos para a função
    if [[ $# -ge 2 ]]; then
        if [[ $(find $1 -iname $2 | wc -l) -eq 0 ]]; then  # Busca por arquivos com o nome
            printf %b ">> Não foi possível encontrar '${2}': Arquivo inexistente.\n"
            if [[ $# -ge 3 ]]; then
                printf %b "${3}"
            fi
            exit 1
        else
            # Exibe a lista de arquivos encontrados com o nome
            ls $2
            exit 0
        fi
    else
        cat << EOF
>> Sintaxe inválida para a função 'require'.
>> Opções: require [caminho] [arquivo]
           require [caminho] [arquivo] [link para download]
EOF
    exit 1
    fi
}

# Verifica dependências e faz o download caso não existam
# Em seguida inclui a dependência no script atual com o 'source "$dep"'
# O array $sources deve ser declarado antes pelo chamador, de forma global
# $1 = Diretório temporário para dependências
# $2 = URL para download das dependências
# $3 = Texto de aviso de execução da função (Ex.: Verificando dependências...\n)
get_sources()
{
    printf %b "get_sources -> "
    
    # Linha de separação
    local _linha="--------------------------------------------------------------------------------"
    local _msg_error="FAIL\n${_linha}\n \
# Os argumentos [${sources[@]}] são inválidos para get_sources. \n  \
\$1 = Diretório temporário para dependências \n  \
\$2 = URL para download das dependências \n  \
\$3 = Texto de aviso de execução da função (Ex.: Verificando dependências...\\\n) \n\
${_linha}\n"
    case "$#" in
        2|3) printf %b "OK\n"; exit 0 ;;
        *) printf %b "${_msg_error}" \
        && exit 1 ;;
    esac
    
    # Imprime mensagemde aviso de execução passada pelo argumento $3
    if [[ "$3" -ne "" ]]; then
        printf %b "$3"
    fi

    # Cria o diretório para dependências
    if ! [[ -d $1 ]]; then
        mkdir -v "$1"
    fi
    
    # Download das dependências
    for dep in "${sources[@]}"; do
        printf %b "${_linha}\n"
        printf %b "> $1/$dep -> "
        if [[ -f "$1/$dep" ]]; then
            printf %b "OK\n"
        else
            printf %b "Não encontrada.\n"
            wget -v $2/$dep -O "$1/$dep"
            # Encerra se não conseguir fazer o download do arquivo
            if [[ $? -ne 0 ]]; then
                rm -rfv "$1/$dep"
                exit 1
            fi
        fi
        # Inclui a dependência no chamador
        source "$1/$dep"
    done
}

#--------------------------------- FIM-FUNÇÕES --------------------------------<