#!/usr/bin/env bash
# Template orgulhosamente criado por (Shell-Base)

#-----------HEADER-------------------------------------------------------------|
# AUTOR             : Vovolinux <suporte@vovolinux.com.br>
# HOMEPAGE          : https://vovolinux.com.br 
# DATA DE CRIAÇÃO   : 25/04/2020 às 17:37 
# PROGRAMA          : InfoSo
# VERSÃO            : 1.0.0
# LICENÇA           : MIT
# PEQUENA DESCRIÇÃO : Informações sobre o sistema operacional
#
# CHANGELOG :
#
#------------------------------------------------------------------------------|


#--------------------------------- VARIÁVEIS ---------------------------------->

# Array de distribuições para verificação no método 'verifica_distro()'
distros=()

#------------------------------- FIM-VARIÁVEIS --------------------------------<


#----------------------------------- FUNÇÕES ---------------------------------->

# Encerra o script se não estiver sendo executado como r00t.
somente_root()
{
    # é root?
    [[ $UID -ne 0 ]] && {  
        printf %b "Execute como r00t.\n"
        exit 1
    }
}

# Obtém o nome da distro
get_distro()
{
    release='os-release'
    linha='PRETTY'
    
    # Compatibilidade os-release <-> lsb-release
    if ! [[ -e /etc/${release} ]]; then
        release='lsb-release'
        linha='CODENAME'
    fi    

    printf %b "$(cat /etc/"${release}" | grep "${linha}" | cut -d"\"" -f2)"
}

# Verifica se o script já foi testado na distro atual
verifica_distro()
{
    # Flag para continuar o script
    local continua=0
    
    # Distro atual
    local distro=$(get_distro)

    for d in "${distros[@]}"; do
        if [[ "${d}" == ${distro} ]]; then
            continua=1
        fi
    done

    [[ $continua -eq 0 ]] && { 
        printf %b ">> Este script ainda não foi testado com ${distro}.\n";
        
        read -ep ">> Prosseguir com a instalação mesmo assim? [s/N]: " -n 1
        case "$REPLY" in
            s|S) printf %b "\n" && return 0 ;;
            *) exit 1  ;;
        esac
    } 
}

# Encerra o script se não encontrar pelo menos uma ocorrência com 
# o nome do arquivo no diretório e exibe link para download.
# $1 = diretório
# $2 = nome do arquivo
# #3 = link para download
require()
{
    # Verifica se passou dois ou mais argumentos para a função
    if [[ $# -ge 2 ]]; then
        if [[ $(find $1 -iname $2 | wc -l) -eq 0 ]]; then  # Busca por arquivos com o nome
            printf %b ">> Não foi possível encontrar '${2}': Arquivo inexistente.\n"
            if [[ $# -ge 3 ]]; then
                printf %b ">> Faça o download em:\n   ${3}\n"
                printf %b ">> e salve o arquivo no diretório:\n   '${1}/'.\n"
            fi
            exit 1
        else
            ls ${2}
        fi
    else
        cat << EOF
>> Sintaxe inválida para a função 'require'.
>> Opções: require [caminho] [arquivo]
           require [caminho] [arquivo] [link para download]
EOF
    fi
}

#--------------------------------- FIM-FUNÇÕES --------------------------------<